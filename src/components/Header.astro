---
import Wrapper from "./ui/Wrapper.astro";
const currentPath = Astro.url.pathname;
import socialsJson from "../data/socials.json";
---

<header class="fixed w-full left-0 right-0 top-0">
  <Wrapper>
    <div class="top-header flex justify-between items-center h-12">
      <div
        class="color-mode-toggler group/item cursor-pointer hover:bg-background-1/2 relative flex gap-2 items-center px-4 py-2 rounded-xl bg-text text-background fill-background"
      >
        <span class="status">
          <i class="fa-regular fa-lightbulb text-background"></i>
          <span class="text">Light mode</span>
        </span>
        <ul
          class="color-mode-options invisible group-hover/item:visible bg-text text-background p-2 absolute top-[0] left-[100%] w-max z-10 shadow-xl shadow-background rounded-xl"
        >
          <li class="hover:bg-texthover transition-all" data-color="light">
            <i class="fa-regular fa-lightbulb text-text"></i>
            <span class="text">Light mode</span>
          </li>
          <li class="hover:bg-texthover transition-all" data-color="dark">
            <i class="fa-solid fa-moon text-text"></i>
            <span class="text">Dark mode</span>
          </li>
          <li class="hover:bg-texthover transition-all" data-color="system">
            <i class="fa-solid fa-computer text-text"></i>
            <span class="text">System</span>
          </li>
        </ul>
      </div>

      {
        socialsJson && (
          <ul class="social flex gap-2">
            {socialsJson.map((item) => (
              <li>
                <a href={item.url} target="_blank" title={item.title}>
                  <img
                    src={item.icon}
                    alt={item.title}
                    class="invert dark:invert-0"
                  />
                </a>
              </li>
            ))}
          </ul>
        )
      }
    </div>
    <div
      class="main-header relative rounded-2xl shadow-lg bg-text flex justify-between items-center"
    >
      <div class="logo pl-2">
        <a href="/">
          <img
            src="/MainLogo.svg"
            alt="Ahmed Lemssiah Portfolio Logo"
            class="brightness-[0] invert dark:brightness-100 dark:invert-0"
          />
        </a>
      </div>
      <nav>
        <div class="burger px-2 py-3 sm:hidden">
          <i class="fa-solid fa-bars fa-2x"></i>
          <i class="fa-solid fa-times fa-2x"></i>
        </div>
        <ul
          class="MainNav absolute w-full pointer-events-auto z-100 top-[110%] right-0 bg-text p-5 rounded-b-xl rounded-tl-xl
          sm:relative sm:flex sm:gap-2 sm:opacity-1 sm:bg-none sm:rounded-xl sm:font-semibold text-background"
        >
          <li>
            <a
              href="/"
              class={`block text-center py-2 sm:py-0 px-2 mx-2 ${currentPath === "/" && "current"}`}
              >Start</a
            >
          </li>
          <li>
            <a
              href="/about"
              class={`block text-center py-2 sm:py-0 px-2 mx-2 ${currentPath === "/about" && "current"}`}
              >Ãœber mich</a
            >
          </li>
          <li>
            <a
              href="/service"
              class={`block text-center py-2 sm:py-0 px-2 mx-2 ${currentPath === "/service" && "current"}`}
              >Leistungen</a
            >
          </li>
          <li>
            <a
              href="/contact"
              class={`block text-center py-2 sm:py-0 px-2 mx-2 ${currentPath === "/contact" && "current"}`}
              >Kontakt</a
            >
          </li>
        </ul>
      </nav>
    </div>
  </Wrapper>
</header>
<style>
  .MainNav::before {
    content: "";
    position: absolute;
    top: -10px;
    right: 4px;
    rotate: 45deg;
    background-color: var(--color-text);
    width: 20px;
    aspect-ratio: 1;
    border-radius: 5px 0 0 0;
  }
  body[data-color="light"] {
    .MainNav::before {
      background-color: var(--color-background);
    }
  }
  .MainNav {
    opacity: 0;
    top: 150%;
    transition: all 0.5s;
    pointer-events: none;
    z-index: 0;
  }
  .MainNav.open {
    opacity: 1;
    top: 130%;
    pointer-events: all;
    z-index: 100;
  }

  .burger.open .fa-bars {
    display: none;
  }
  .burger:not(.open) .fa-times {
    display: none;
  }

  body.open::before {
    content: "";
    background-image: linear-gradient(to top, #000 0%, transparent 150%);
    position: absolute;
    inset: 0;
    pointer-events: none;
    z-index: 10;
    backdrop-filter: blur(2px) grayscale(0.5);
  }

  a.current {
    position: relative;
  }
  a.current::after {
    content: "";
    position: absolute;
    width: 25%;
    left: 50%;
    transform: translateX(-50%);
    bottom: -5px;
    height: 20px;
    background-image: url("/UnderLine.svg");
    background-size: contain;
    background-repeat: no-repeat;
  }

  @media only screen and (min-width: 650px) {
    .MainNav,
    .MainNav.open {
      opacity: 1;
      pointer-events: all;
    }
    .MainNav::before,
    .MainNav.open::before {
      display: none;
    }
    body.open::before {
      display: none;
    }
    a.current::after {
      width: 100%;
      left: 6px;
      transform: translateX(0);
      bottom: auto;
      top: 80%;
      height: 30px;
    }
  }
</style>
<script is:inline>
  const burger = document.querySelector(".burger");
  const MainNav = document.querySelector(".MainNav");
  const body = document.body;

  burger.addEventListener("click", (e) => {
    e.preventDefault();
    burger.classList.toggle("open");
    MainNav.classList.toggle("open");
    body.classList.toggle("open");
  });

  const colorModeToggler = document.querySelector(
    "header div.color-mode-toggler"
  );
  const colorModeToggleStatus = colorModeToggler.querySelector(".status");
  const colorModeOptions = document.querySelectorAll(
    "ul.color-mode-options li"
  );
  colorModeOptions.forEach((item) => {
    item.addEventListener("click", (e) => {
      e.preventDefault();

      document.body.dataset.color = item.dataset.color;

      //Set the Menu to the current data
      colorModeToggleStatus.innerHTML = item.innerHTML;
      //set Colormode in Local Storage
      localStorage.setItem("colorMode", item.dataset.color);
    });

    function checkColorModeinStorage() {
      if (!localStorage.getItem("colorMode")) return;
      return localStorage.getItem("colorMode");
    }

    document.body.dataset.color = checkColorModeinStorage();
    colorModeToggleStatus.innerHTML = colorModeToggler.querySelector(
      `[data-color=${checkColorModeinStorage()}]`
    ).innerHTML;
  });
</script>
